// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import * as path from 'path';

import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './translation_service_client_config.json';

const version = require('../../../package.json').version;

export interface ClientOptions extends gax.GrpcClientOptions,
                                       gax.GoogleAuthOptions {
  libName?: string;
  libVersion?: string;
  clientConfig?: gax.ClientConfig;
  fallback?: boolean;
  apiEndpoint?: string;
  port?: number;
  servicePath?: string;
  sslCreds?: object;
}

interface Descriptors {
  page: {[name: string]: gax.PageDescriptor};
  stream: {[name: string]: gax.StreamDescriptor};
  longrunning: {[name: string]: gax.LongrunningDescriptor};
}

export interface Callback<
    ResponseObject, NextRequestObject, RawResponseObject> {
  (err: Error|null|undefined, value?: ResponseObject|null,
   nextRequest?: NextRequestObject, rawResponse?: RawResponseObject): void;
}

export interface Operation<ResultType, MetadataType> extends gax.Operation {
  promise(): Promise<
      [ResultType, MetadataType, protosTypes.google.longrunning.IOperation]>;
}


export interface PaginationCallback<
    RequestObject, ResponseObject, ResponseType> {
  (err: Error|null, values?: ResponseType[], nextPageRequest?: RequestObject,
   rawResponse?: ResponseObject): void;
}

export interface PaginationResponse<
    RequestObject, ResponseObject, ResponseType> {
  values?: ResponseType[];
  nextPageRequest?: RequestObject;
  rawResponse?: ResponseObject;
}

export class TranslationServiceClient {
  /*
  Provides natural language translation operations.
  */
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  auth: gax.GoogleAuth;

  /**
   * Construct an instance of TranslationServiceClient.
   *
   * @@param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @@param {object} [options.credentials] - Credentials object.
   * @@param {string} [options.credentials.client_email]
   * @@param {string} [options.credentials.private_key]
   * @@param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @@param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @@param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @@param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@@link
   * https://developers.google.com/identity/protocols/application-default-credentials
   * Application Default Credentials}, your project ID will be detected
   * automatically.
   * @@param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @@param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof TranslationServiceClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof TranslationServiceClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gl-node/${process.version}`, `grpc/${gaxGrpc.grpcVersion}`,
      `gax/${gaxModule.version}`, `gapic/${version}`,
      `gl-web/${gaxModule.version}`
    ];
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath =
        path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
        opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listGlossaries: new gaxModule.PageDescriptor(
          'pageToken', 'nextPageToken', 'glossaries')
    };
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback ?
        gaxModule.protobuf.Root.fromJSON(require('../../protos/protos.json')) :
        gaxModule.protobuf.loadSync(nodejsProtoPath);

    const operationsClient =
        gaxModule
            .lro({
              auth: this.auth,
              grpc: 'grpc' in gaxGrpc ? gaxGrpc.grpc : undefined
            })
            .operationsClient(opts);
    const batchTranslateTextResponse =
        protoFilesRoot.lookup('BatchTranslateResponse') as gax.protobuf.Type;
    const batchTranslateTextMetadata =
        protoFilesRoot.lookup('BatchTranslateMetadata') as gax.protobuf.Type;
    const createGlossaryResponse =
        protoFilesRoot.lookup('Glossary') as gax.protobuf.Type;
    const createGlossaryMetadata =
        protoFilesRoot.lookup('CreateGlossaryMetadata') as gax.protobuf.Type;
    const deleteGlossaryResponse =
        protoFilesRoot.lookup('DeleteGlossaryResponse') as gax.protobuf.Type;
    const deleteGlossaryMetadata =
        protoFilesRoot.lookup('DeleteGlossaryMetadata') as gax.protobuf.Type;

    this._descriptors.longrunning = {
      batchTranslateText: new gaxModule.LongrunningDescriptor(
          operationsClient,
          batchTranslateTextResponse.decode.bind(batchTranslateTextResponse),
          batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),
      createGlossary: new gaxModule.LongrunningDescriptor(
          operationsClient,
          createGlossaryResponse.decode.bind(createGlossaryResponse),
          createGlossaryMetadata.decode.bind(createGlossaryMetadata)),
      deleteGlossary: new gaxModule.LongrunningDescriptor(
          operationsClient,
          deleteGlossaryResponse.decode.bind(deleteGlossaryResponse),
          deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.cloud.translation.v3.TranslationService',
        gapicConfig as gax.ClientConfig, opts.clientConfig || {},
        {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.showcase.v1alpha2.Echo.
    const translationServiceStub =
        gaxGrpc.createStub(
            opts.fallback ?
                // @ts-ignore Do not check types for loaded protos
                protos.lookupService(
                    'google.cloud.translation.v3.TranslationService') :
                // @ts-ignore Do not check types for loaded protos
                protos.google.cloud.translation.v3.TranslationService,
            opts as gax.ClientStubOptions) as Promise<{[method: string]: Function}>;

    const translationServiceStubMethods = [
      'translateText', 'detectLanguage', 'getSupportedLanguages',
      'batchTranslateText', 'createGlossary', 'listGlossaries', 'getGlossary',
      'deleteGlossary'
    ];

    for (const methodName of translationServiceStubMethods) {
      const innerCallPromise = translationServiceStub.then(
          (stub: {[method: string]: Function}) => (...args: Array<{}>) => {
            return stub[methodName].apply(stub, args);
          },
          (err: Error|null|undefined) => () => {
            throw err;
          });

      this._innerApiCalls[methodName] = gax.createApiCall(
          innerCallPromise, defaults[methodName],
          this._descriptors.page[methodName] ||
              this._descriptors.stream[methodName] ||
              this._descriptors.longrunning[methodName]);
    }
  }
  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'translate.googleapis.com';
  }
  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'translate.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-translation'
    ];
  }

  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /*
  Translates input text and returns translated text.
  */
  translateText(
      request: protosTypes.google.cloud.translation.v3.ITranslateTextRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.translation.v3.ITranslateTextResponse,
        protosTypes.google.cloud.translation.v3.ITranslateTextRequest|undefined,
        {}|undefined
      ]>;
  translateText(
      request: protosTypes.google.cloud.translation.v3.ITranslateTextRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.translation.v3.ITranslateTextResponse,
          protosTypes.google.cloud.translation.v3.ITranslateTextRequest|
          undefined,
          {}|undefined>): void;
  translateText(
      request: protosTypes.google.cloud.translation.v3.ITranslateTextRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.translation.v3.ITranslateTextResponse,
          protosTypes.google.cloud.translation.v3.ITranslateTextRequest|
          undefined,
          {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.translation.v3.ITranslateTextResponse,
          protosTypes.google.cloud.translation.v3.ITranslateTextRequest|
          undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.translation.v3.ITranslateTextResponse,
        protosTypes.google.cloud.translation.v3.ITranslateTextRequest|undefined,
        {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.translateText(request, options, callback);
  }
  /*
  Detects the language of text within a request.
  */
  detectLanguage(
      request: protosTypes.google.cloud.translation.v3.IDetectLanguageRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.translation.v3.IDetectLanguageResponse,
        protosTypes.google.cloud.translation.v3.IDetectLanguageRequest|
        undefined,
        {}|undefined
      ]>;
  detectLanguage(
      request: protosTypes.google.cloud.translation.v3.IDetectLanguageRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.translation.v3.IDetectLanguageResponse,
          protosTypes.google.cloud.translation.v3.IDetectLanguageRequest|
          undefined,
          {}|undefined>): void;
  detectLanguage(
      request: protosTypes.google.cloud.translation.v3.IDetectLanguageRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.translation.v3.IDetectLanguageResponse,
          protosTypes.google.cloud.translation.v3.IDetectLanguageRequest|
          undefined,
          {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.translation.v3.IDetectLanguageResponse,
          protosTypes.google.cloud.translation.v3.IDetectLanguageRequest|
          undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.translation.v3.IDetectLanguageResponse,
        protosTypes.google.cloud.translation.v3.IDetectLanguageRequest|
        undefined,
        {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.detectLanguage(request, options, callback);
  }
  /*
  Returns a list of supported languages for translation.
  */
  getSupportedLanguages(
      request:
          protosTypes.google.cloud.translation.v3.IGetSupportedLanguagesRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.translation.v3.ISupportedLanguages,
        protosTypes.google.cloud.translation.v3.IGetSupportedLanguagesRequest|
        undefined,
        {}|undefined
      ]>;
  getSupportedLanguages(
      request:
          protosTypes.google.cloud.translation.v3.IGetSupportedLanguagesRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.translation.v3.ISupportedLanguages,
          protosTypes.google.cloud.translation.v3.IGetSupportedLanguagesRequest|
          undefined,
          {}|undefined>): void;
  getSupportedLanguages(
      request:
          protosTypes.google.cloud.translation.v3.IGetSupportedLanguagesRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.translation.v3.ISupportedLanguages,
          protosTypes.google.cloud.translation.v3.IGetSupportedLanguagesRequest|
          undefined,
          {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.translation.v3.ISupportedLanguages,
          protosTypes.google.cloud.translation.v3.IGetSupportedLanguagesRequest|
          undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.translation.v3.ISupportedLanguages,
        protosTypes.google.cloud.translation.v3.IGetSupportedLanguagesRequest|
        undefined,
        {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.getSupportedLanguages(
        request, options, callback);
  }
  /*
  Gets a glossary. Returns NOT_FOUND, if the glossary doesn&#39;t
 exist.
  */
  getGlossary(
      request: protosTypes.google.cloud.translation.v3.IGetGlossaryRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.translation.v3.IGlossary,
        protosTypes.google.cloud.translation.v3.IGetGlossaryRequest|undefined,
        {}|undefined
      ]>;
  getGlossary(
      request: protosTypes.google.cloud.translation.v3.IGetGlossaryRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.translation.v3.IGlossary,
          protosTypes.google.cloud.translation.v3.IGetGlossaryRequest|undefined,
          {}|undefined>): void;
  getGlossary(
      request: protosTypes.google.cloud.translation.v3.IGetGlossaryRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.translation.v3.IGlossary,
          protosTypes.google.cloud.translation.v3.IGetGlossaryRequest|undefined,
          {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.translation.v3.IGlossary,
          protosTypes.google.cloud.translation.v3.IGetGlossaryRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.translation.v3.IGlossary,
        protosTypes.google.cloud.translation.v3.IGetGlossaryRequest|undefined,
        {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.getGlossary(request, options, callback);
  }

  /*
  Translates a large volume of text in asynchronous batch mode.
 This function provides real-time output as the inputs are being processed.
 If caller cancels a request, the partial results (for an input file, it&#39;s
 all or nothing) may still be available on the specified output location.

 This call returns immediately and you can
 use google.longrunning.Operation.name to poll the status of the call.
  */
  batchTranslateText(
      request:
          protosTypes.google.cloud.translation.v3.IBatchTranslateTextRequest,
      options?: gax.CallOptions):
      Promise<[
        Operation<
            protosTypes.google.cloud.translation.v3.IBatchTranslateResponse,
            protosTypes.google.cloud.translation.v3.IBatchTranslateMetadata>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  batchTranslateText(
      request:
          protosTypes.google.cloud.translation.v3.IBatchTranslateTextRequest,
      options: gax.CallOptions,
      callback: Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IBatchTranslateResponse,
              protosTypes.google.cloud.translation.v3.IBatchTranslateMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>):
      void;
  batchTranslateText(
      request:
          protosTypes.google.cloud.translation.v3.IBatchTranslateTextRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IBatchTranslateResponse,
              protosTypes.google.cloud.translation.v3.IBatchTranslateMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IBatchTranslateResponse,
              protosTypes.google.cloud.translation.v3.IBatchTranslateMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>):
      Promise<[
        Operation<
            protosTypes.google.cloud.translation.v3.IBatchTranslateResponse,
            protosTypes.google.cloud.translation.v3.IBatchTranslateMetadata>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.batchTranslateText(request, options, callback);
  }
  /*
  Creates a glossary and returns the long-running operation. Returns
 NOT_FOUND, if the project doesn&#39;t exist.
  */
  createGlossary(
      request: protosTypes.google.cloud.translation.v3.ICreateGlossaryRequest,
      options?: gax.CallOptions):
      Promise<[
        Operation<
            protosTypes.google.cloud.translation.v3.IGlossary,
            protosTypes.google.cloud.translation.v3.ICreateGlossaryMetadata>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createGlossary(
      request: protosTypes.google.cloud.translation.v3.ICreateGlossaryRequest,
      options: gax.CallOptions,
      callback: Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IGlossary,
              protosTypes.google.cloud.translation.v3.ICreateGlossaryMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>):
      void;
  createGlossary(
      request: protosTypes.google.cloud.translation.v3.ICreateGlossaryRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IGlossary,
              protosTypes.google.cloud.translation.v3.ICreateGlossaryMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IGlossary,
              protosTypes.google.cloud.translation.v3.ICreateGlossaryMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>):
      Promise<[
        Operation<
            protosTypes.google.cloud.translation.v3.IGlossary,
            protosTypes.google.cloud.translation.v3.ICreateGlossaryMetadata>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.createGlossary(request, options, callback);
  }
  /*
  Deletes a glossary, or cancels glossary construction
 if the glossary isn&#39;t created yet.
 Returns NOT_FOUND, if the glossary doesn&#39;t exist.
  */
  deleteGlossary(
      request: protosTypes.google.cloud.translation.v3.IDeleteGlossaryRequest,
      options?: gax.CallOptions):
      Promise<[
        Operation<
            protosTypes.google.cloud.translation.v3.IDeleteGlossaryResponse,
            protosTypes.google.cloud.translation.v3.IDeleteGlossaryMetadata>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteGlossary(
      request: protosTypes.google.cloud.translation.v3.IDeleteGlossaryRequest,
      options: gax.CallOptions,
      callback: Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IDeleteGlossaryResponse,
              protosTypes.google.cloud.translation.v3.IDeleteGlossaryMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>):
      void;
  deleteGlossary(
      request: protosTypes.google.cloud.translation.v3.IDeleteGlossaryRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IDeleteGlossaryResponse,
              protosTypes.google.cloud.translation.v3.IDeleteGlossaryMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          Operation<
              protosTypes.google.cloud.translation.v3.IDeleteGlossaryResponse,
              protosTypes.google.cloud.translation.v3.IDeleteGlossaryMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>):
      Promise<[
        Operation<
            protosTypes.google.cloud.translation.v3.IDeleteGlossaryResponse,
            protosTypes.google.cloud.translation.v3.IDeleteGlossaryMetadata>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.deleteGlossary(request, options, callback);
  }
  /*
  Lists glossaries in a project. Returns NOT_FOUND, if the project doesn&#39;t
 exist.
  */
  listGlossaries(
      request: protosTypes.google.cloud.translation.v3.IListGlossariesRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.translation.v3.IGlossary[],
        protosTypes.google.cloud.translation.v3.IListGlossariesRequest|null,
        protosTypes.google.cloud.translation.v3.IListGlossariesResponse
      ]>;
  listGlossaries(
      request: protosTypes.google.cloud.translation.v3.IListGlossariesRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.translation.v3.IGlossary[],
          protosTypes.google.cloud.translation.v3.IListGlossariesRequest|null,
          protosTypes.google.cloud.translation.v3.IListGlossariesResponse>):
      void;
  listGlossaries(
      request: protosTypes.google.cloud.translation.v3.IListGlossariesRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.translation.v3.IGlossary[],
          protosTypes.google.cloud.translation.v3.IListGlossariesRequest|null,
          protosTypes.google.cloud.translation.v3.IListGlossariesResponse>,
      callback?: Callback<
          protosTypes.google.cloud.translation.v3.IGlossary[],
          protosTypes.google.cloud.translation.v3.IListGlossariesRequest|null,
          protosTypes.google.cloud.translation.v3.IListGlossariesResponse>):
      Promise<[
        protosTypes.google.cloud.translation.v3.IGlossary[],
        protosTypes.google.cloud.translation.v3.IListGlossariesRequest|null,
        protosTypes.google.cloud.translation.v3.IListGlossariesResponse
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.listGlossaries(request, options, callback);
  }
}
